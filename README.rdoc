= Paste

This gem simplifies dependencies between javascript and easily allows requiring of javascript.

== Installing

In your Gemfile: <tt>gem 'paste'</tt>

Then, <tt>bundle install</tt>

== Usage
Put all of your javascript files in +app/javascripts+. You can even make erb javascript files to interpolate constants and such.

Now in your views, whenever you need javascript, just call
  <% javascript 'some/javascript/file' %>
  <% css 'some/css/file' %>
or	
  <% javascript 'foo/bar', 'foo', 'baz' %>
		
And then in your layout file,

  <%= paste_js_tags %>
  <%= paste_css_tags %>

And that's it!

I would recommend you add <tt>public/javascripts/*</tt> to the ignore list of your VCS.

== Behaviour

Paste uses +stylesheet_link_tag+ with a +:cache+ option set to a hash of the included CSS files. Normally this means that in production all CSS is concatenated into one file.

=== Production
For a Rails app, in production, <tt>Paste::JS::Unify</tt> is used to concatenate javascript. This means that +paste_js_tags+ will output only one tag. This tag will have the concatenation of all javascript required, including all of the dependencies (in the correct order).

This is not compressed originally because it's generated on the fly. A cache file is written, however, so on a re-deploy you can rebuild all of the previously generated concatenations and Google's closure compiler is used for compression.

=== Development
For a Rails app in development, +Paste::JS::Chain+ is used to paste javascripts together. This paster simply takes the list of javascripts and determines the dependencies and then generates a separate tag for each javascript file. This proves useful for debugging.

== Example

Assume that +app/javascripts/jquery.js+ exists and we have these files:

==== app/javascripts/foo.js

		//= require <jquery>
		//= require <foo/bar>
		
		$(function() {
			$('#foo').fadeIn().html($['BAR_VALUE']);
		});

==== app/javascripts/foo/bar.js.erb

		//= require <jquery>

		$['BAR_VALUE'] = <%= Bar::BAR_VALUE %>;

==== app/views/foo/index.html.erb
		
    <% javascript 'foo' %>
    <% css 'foo' %>
		
		<div id='bar'>
			And the bar value for today is: <div id='foo'></div>
		</div>

For this example, whenever +foo/index.html.erb+ is rendered, the stylesheet +public/stylesheets/foo+ will be included and so will both +app/javascripts/foo.js+ and +app/javascripts/bar.js.erb+ with +bar+ before +foo+.

== Configuration

You can configure paste through +Paste::CSS.configure+ or +Paste::JS.configure+. The following are recognized options:
  
  # These options are read by both Paste::JS and Paste::CSS
  Paste::Glue.configure do |config|
    config.root     # the root directory (defaults to Rails.root or the pwd)

    config.tmp_path # a temporary directory to use. Can be relative to the root
                    # or it can be an absolute path. Default: 'tmp/paste-cache'
  end

  Paste::JS.configure do |config|
    config.destination # relative or absolute path of where to put javascripts.
                       # Default: 'public/javascripts'
    
    config.load_path   # The load path for javascripts. This is where to find
                       # the source files. Default: ['app/javascripts']
    
    config.erb_path    # relative or absolute path of where to generate the
                       # ERB results to. Default: 'tmp/paste-cache/erb'
    
    config.cache_file  # The cache file for when pastes are made. This allows
                       # the same pastes to be persisted through deployments
                       # without regenerating on the first request. This is
                       # a location relative to config.tmp_path
                       # Default: sprockets.yml
    
    config.parser      # The parser class to use when determining dependencies
                       # of javascripts. Default: Paste::Parser::Sprockets
  end

All configuration should be done in `config/application.rb` or `config/environments/*.rb`.

== License

Copyright &copy; 2009 Alex Crichton.

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.